---
layout: post

title: How to use Redis?
date: 2019-12-09 13:50:24.000000000 +09:00
---

#### To Use Redis

    string:set,get,incr(加),decrby(减);  
	list:lpush,rpop,llen;  
	set:sadd,scard(返回集合中元素数量),sismember(元素是否在集合中),srem(删除);  
	hash:hset,hget,hlen,hmget(获取多个key的值);  
	sore set(有序分数集，值唯一不可修改，可覆盖):zadd,zcard,zrange(查看范围内的key-value),zrank;  
	redis多数据库(一个实例最多可以提供16个--0-15)：select(选择数据库),keys *,move;

#### Redis 事务
    
	事务特点：命令串行执行；执行期间redis不会再对其它的客户端提供任何服务，从而保证事务中的命令能够原子化执行;(注:单个redis命令是原子化的，但是redis事务的执行不是原子性的。事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。)  
	事务的操作：1>. multi(开启); 2>.exec(执行所有事务块的命令); 3>.discard(取消事务，放弃执行的事务块内的所有命令);
	
#### Redis 数据持久化

    RDB数据持久化方式(持久化时间在conf文件中定义--找save关键字，前面代表时间(秒)，后面代表key个数)：  
	Advantages：  
	<1> redis数据库只包含一个文件存储在硬盘中，方便进行文件备份；  
	<2> 方便进行灾难恢复(同1);  
	<3> 性能最大化。redis开始持久化的时候只分出一些子进程，避免了服务器进程执行IO操作，提高启动效率;  
	Disadvantages:  
	<1> 不能最大化避免数据丢失，系统在进行持久化之前出现空档期，导致数据在写入硬盘之前发生丢失;  
	<2> RDB开启子进程的方式来进行持久化，当数据集很大时，可能会导致服务器停止一些事件(几十毫秒甚至1秒);  
	
	AOF数据持久化方式(在conf中找appendonly关键字，需要使用该方式时，no改为yes，appendfsync表示同步策略)：  
	Advantages：  
	<1> 有三种同步策略：每秒同步，每修改同步，不同步，可以带来更高的数据安全性;  
	<2> 日志的写入采取的是append追加的模式，在写入过程中即使出现服务器档期问题，也不会破坏日志文件中已经写入的内容;  
	<3> 如果日志过大，redis可以自动启动重写机制，redis会不断的将修改的数据写入到老的磁盘当中，同时redis会创建一个新的文件来记录此期间产生了哪些修改命令被执行了;  
	<4> AOF有一个格式非常清晰易于理解的日志文件，用于记录所有修改操作，通过这个文件可以完成数据的重建;  
	Disadvantages：  
	<1> AOF比RDB文件大;  
	<2> 当使用前两个同步策略时，AOF的运行效率低于RDB;  
	
	Redis默认使用RDB持久化方式！！！